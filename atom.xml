<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若非的日志</title>
  
  <subtitle>爱编码 - 爱生活 - 爱分享</subtitle>
  <link href="https://hi-ruofei.com/atom.xml" rel="self"/>
  
  <link href="https://hi-ruofei.com/"/>
  <updated>2022-11-14T13:54:15.000Z</updated>
  <id>https://hi-ruofei.com/</id>
  
  <author>
    <name>若非</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NextJS 添加 TypeScript</title>
    <link href="https://hi-ruofei.com/post/NextJS-%E6%B7%BB%E5%8A%A0-TypeScript/"/>
    <id>https://hi-ruofei.com/post/NextJS-%E6%B7%BB%E5%8A%A0-TypeScript/</id>
    <published>2022-11-14T13:54:15.000Z</published>
    <updated>2022-11-14T13:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 NextJS 项目中要添加对 TypeScript 的支持，有两种方式：</p><ol><li>官方脚手架；</li><li>手动安装。</li></ol><span id="more"></span><h2 id="官方脚手架"><a href="#官方脚手架" class="headerlink" title="官方脚手架"></a>官方脚手架</h2><p>在创建新的 NextJS 项目时，可方便的通过官方脚手架来获得对 TypeScript 的支持。只需在脚手架命令后加一个 <code>--ts</code> 或 <code>--typescript</code> 参数即可，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest --ts</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn create next-app --typescript</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm create next-app --ts</span><br></pre></td></tr></table></figure><p>在创建新项目时，这种方式是最简单。</p><p>若是在现有的 NextJS 项目中添加 TypeScript，就只能手动安装了。</p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>首先，在项目根目录创建 TypeScript 的配置文件 <code>tsconfig.json</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch tsconfig.json</span><br></pre></td></tr></table></figure><p>然后，执行 <code>npm run dev</code> 或 <code>yarn dev</code>，NextJS 将自动配置 TypeScript 的默认值到 <code>tsconfig.json</code> 文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ yarn dev</span><br><span class="line">yarn run v1.22.17</span><br><span class="line">$ next dev</span><br><span class="line">ready - started server on 0.0.0.0:3000, url: http://localhost:3000</span><br><span class="line">It looks like you<span class="string">&#x27;re trying to use TypeScript but do not have the required package(s) installed.</span></span><br><span class="line"><span class="string">Installing dependencies</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are not trying to use TypeScript, please remove the tsconfig.json file from your package root (and any TypeScript files in your pages directory).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing devDependencies (yarn):</span></span><br><span class="line"><span class="string">- typescript</span></span><br><span class="line"><span class="string">- @types/react</span></span><br><span class="line"><span class="string">- @types/node</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">wait  - compiling / (client and server)...</span></span><br><span class="line"><span class="string">event - compiled client and server successfully in 119 ms (207 modules)</span></span><br></pre></td></tr></table></figure><p>除此之外，NextJS 还会在项目根目录额外创建一个 <code>next-env.d.ts</code> 文件，这个文件默认忽略提交并且不要手动修改，因为这个文件在项目编译时可能随时被更改。而若要提供全局类型，可以新增一个 <code>additional.d.ts</code> 文件用来提供项目全局类型。不要忘记将 <code>additional.d.ts</code> 文件添加到 <code>tsconfig.json</code> 配置文件中，通常是添加到 <code>include</code> 数组中即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;next-env.d.ts&quot;</span>, <span class="string">&quot;additional.d.ts&quot;</span>, <span class="string">&quot;**/*.ts&quot;</span>, <span class="string">&quot;**/*.tsx&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，是在 NextJS 项目中添加 TypeScript 的两种方式。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 NextJS 项目中要添加对 TypeScript 的支持，有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;官方脚手架；&lt;/li&gt;
&lt;li&gt;手动安装。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>NextJS 入门指南</title>
    <link href="https://hi-ruofei.com/post/NextJS-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://hi-ruofei.com/post/NextJS-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2022-11-04T09:58:23.000Z</published>
    <updated>2022-11-04T09:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统要求：</p><ol><li>操作系统：MacOS&#x2F;Windows (支持 WSL)&#x2F;Linux</li><li>Node.js：&gt;&#x3D; 12.22.0</li></ol><span id="more"></span><h2 id="自动设置"><a href="#自动设置" class="headerlink" title="自动设置"></a>自动设置</h2><p>推荐使用 <code>create-next-app</code> 来自动设置 NextJS 应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn create next-app</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm create next-app</span><br></pre></td></tr></table></figure><p>如果想在创建项目时加入对 TypeScript 的支持，可在命令后面加上 <code>--typescript</code> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest --typescript</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn create next-app --typescript</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm create next-app --typescript</span><br></pre></td></tr></table></figure><p>项目创建成功后：</p><ol><li>运行 <code>npm run dev</code> 或 <code>yarn dev</code> 或 <code>pnpm dev</code> 启动项目；</li><li>在浏览器中访问 <a href="http://localhost:3000；">http://localhost:3000；</a></li><li>编辑 <code>pages/index.js</code> 文件后，在浏览器中实时查看编译结果（支持热更新）。</li></ol><h2 id="手动设置"><a href="#手动设置" class="headerlink" title="手动设置"></a>手动设置</h2><p>在项目中安装 <code>next</code>，<code>react</code> 和 <code>react-dom</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install next react react-dom</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add next react react-dom</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm add next react react-dom</span><br></pre></td></tr></table></figure><p>在的 <code>package.json</code> 文件中加入下面的脚本命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;next dev&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;next start&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;next lint&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的脚本命令对应不同的开发阶段：</p><ul><li><code>dev</code> - 开发环境下启动 Next.js</li><li><code>build</code> - 生产环境打包 Next.js</li><li><code>start</code> - 生产环境下启动 Next.js</li><li><code>lint</code> - 设置 Next.js 内置的 ESLint 配置</li></ul><p>在项目根目录下分别创建两个文件夹 <code>pages</code> 和 <code>public</code>：</p><ul><li><code>pages</code> - Next.js 会将 <code>pages</code> 文件夹下的每个文件当做一个路由来处理，路由名对应文件名。例如： <code>pages/about.js</code> 将映射为 <code>/about</code></li><li><code>public</code> - 存储静态资源，如图像、字体等。<code>public</code> 目录下的文件可以在项目中被引用，引用地址为根路径（&#x2F;）</li></ul><p>Next.js 中，每个页面（pages 目录下）都是一个 React 组件，文件以 <code>.js</code>、<code>.ts</code>、<code>.jsx</code> 或 <code>.tsx</code> 后缀结尾。通过特定的文件名命名格式，我们甚至可以实现动态路由的功能，比如：<code>[pid].tsx</code>。</p><p>以上，就是 Next.js 最基本的入门指南了。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;系统要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作系统：MacOS&amp;#x2F;Windows (支持 WSL)&amp;#x2F;Linux&lt;/li&gt;
&lt;li&gt;Node.js：&amp;gt;&amp;#x3D; 12.22.0&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>prefers-color-scheme 设置、检测系统主题色</title>
    <link href="https://hi-ruofei.com/post/prefers-color-scheme-%E8%AE%BE%E7%BD%AE%E3%80%81%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%89%B2/"/>
    <id>https://hi-ruofei.com/post/prefers-color-scheme-%E8%AE%BE%E7%BD%AE%E3%80%81%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%89%B2/</id>
    <published>2022-11-02T17:19:17.000Z</published>
    <updated>2022-11-02T17:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在访问某个站点时，有时可能会发现这样一种场景：该站点在白天访问时，它是亮色主题；当晚上访问时，它就变成暗色主题了。而且这种主题的切换是自动的，他会随系统主题变化而改变。如果我们要将这种功能应用在自己站点上，该如何实现呢？</p><p>本文涉及三个相关知识点：</p><ol><li>设置主题色</li><li>检查主题色</li><li>监听主题色变化</li></ol><span id="more"></span><h2 id="设置主题色"><a href="#设置主题色" class="headerlink" title="设置主题色"></a>设置主题色</h2><p>在 CSS 中，提供了一种设置系统主题色的媒体特性 <code>prefers-color-scheme</code>，该特性通常提供两个值 <code>light</code> 和 <code>dark</code>。顾名思义，这两个值一个代表 <code>日间模式</code>，一个表示 <code>夜间模式</code>。并且他们的兼容性也是最好的。</p><p><img src="https://www.hi-ruofei.com/usr/uploads/2022/09/4286262697.png" alt="prefers-color-scheme 兼容性"></p><p>这里有一个简单的例子，可以很方便的通过 CSS 实现系统主题色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.day</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.night</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-class">.day</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: light) &#123;</span><br><span class="line">  <span class="selector-class">.day</span><span class="selector-class">.light-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night</span><span class="selector-class">.light-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当系统主题为日间模式时，会应用上面的 light 主题样式；当系统主题为夜间模式时，会应用上面的 dark 主题样式。</p><p>实际开发中，我们会将项目用到的色值抽离出来作为全局的公共变量，方便我们对项目整体的色值管理。如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  // Light Theme</span><br><span class="line">  --PrimaryBackgroundColorLight: <span class="number">#f9f9f9</span>;</span><br><span class="line">  --PageBackgroundColorLight: <span class="number">#efefef</span>;</span><br><span class="line">  --PrimaryColorLight: <span class="number">#34495e</span>;</span><br><span class="line">  --PrimaryActivedColorLight: <span class="number">#1890ff</span>;</span><br><span class="line"></span><br><span class="line">  // Dark Theme</span><br><span class="line">  --PrimaryBackgroundColorDark: <span class="number">#293042</span>;</span><br><span class="line">  --PageBackgroundColorDark: <span class="number">#202634</span>;</span><br><span class="line">  --PrimaryColorDark: <span class="number">#c6cfd8</span>;</span><br><span class="line">  --PrimaryActivedColorDark: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义好全局 CSS 变量后，在需要的地方直接引用即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.day</span><span class="selector-class">.light</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--PrimaryBackgroundColorLight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检测主题色"><a href="#检测主题色" class="headerlink" title="检测主题色"></a>检测主题色</h2><p>既然能通过 CSS 设置系统主题色，那 JS 肯定也有能力来检测系统主题色。JS 提供了一个用于检查媒体查询的函数 <code>matchMedia</code>，利用该函数能方便地检查当前系统主题色：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> themeMedia = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(prefers-color-scheme: light)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (themeMedia.matches) &#123;</span><br><span class="line">  <span class="comment">// 日间模式</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 夜间模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听主题色变化"><a href="#监听主题色变化" class="headerlink" title="监听主题色变化"></a>监听主题色变化</h2><p>除了获取当前系统主题色，我们还能监听主题色的变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> themeMedia = <span class="built_in">window</span>.matchMedia(<span class="string">&quot;(prefers-color-scheme: light)&quot;</span>);</span><br><span class="line">themeMedia.addListener(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.matches) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过上面提到的三个知识点，在自己站点实现主题色功能是绰绰有余的。像一些更丰富的多主题切换，虽然实现的方法不同，但思路基本都是类似的。总结起来就是开篇的三句话：如何设置主题、获取当前被应用的主题以及监听主题的变更。</p><p>以上，希望对你有所帮助。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在访问某个站点时，有时可能会发现这样一种场景：该站点在白天访问时，它是亮色主题；当晚上访问时，它就变成暗色主题了。而且这种主题的切换是自动的，他会随系统主题变化而改变。如果我们要将这种功能应用在自己站点上，该如何实现呢？&lt;/p&gt;
&lt;p&gt;本文涉及三个相关知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置主题色&lt;/li&gt;
&lt;li&gt;检查主题色&lt;/li&gt;
&lt;li&gt;监听主题色变化&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://hi-ruofei.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 this</title>
    <link href="https://hi-ruofei.com/post/JavaScript-%E4%B8%AD%E7%9A%84-this/"/>
    <id>https://hi-ruofei.com/post/JavaScript-%E4%B8%AD%E7%9A%84-this/</id>
    <published>2022-03-24T17:28:17.000Z</published>
    <updated>2022-03-24T17:28:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也有可能不同。在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值。</p><p>在非严格模式下，<code>this</code> 值总是指向一个对象；在严格模式下，<code>this</code> 可以是任意值。</p><p>ES5 引入了 bind 方法来设置 <code>this</code> 值，而不用考虑函数是如何被调用的。</p><p>ES2015 引入了 箭头函数，而箭头函数则不提供自身的 this 绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Expressions - this</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Randal&#x27;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br><span class="line"><span class="comment">// expected output: Randal</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="全局上下文中的-this"><a href="#全局上下文中的-this" class="headerlink" title="全局上下文中的 this"></a>全局上下文中的 <code>this</code></h2><p>无论是否在严格模式下，全局环境中的 <code>this</code> 都指向全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器中的 this 值是 window 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Randal&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// Randal</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>还可以使用 globalThis 获取全局对象。无论我们的代码是否在当前上下文执行，我们都可以用 globalThis 获取全局对象。</p><h2 id="函数上下文中的-this"><a href="#函数上下文中的-this" class="headerlink" title="函数上下文中的 this"></a>函数上下文中的 <code>this</code></h2><p>函数内部的 <code>this</code> 值取决于函数被调用的方式。</p><h3 id="非严格模式下，函数调用的-this-值"><a href="#非严格模式下，函数调用的-this-值" class="headerlink" title="非严格模式下，函数调用的 this 值"></a>非严格模式下，函数调用的 <code>this</code> 值</h3><p>非严格模式下，若函数调用未设置 <code>this</code> 值，则 <code>this</code> 值默认指向全局对象。浏览器中的全局对象是 window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器中</span></span><br><span class="line">func() === <span class="built_in">window</span>; <span class="comment">// 在浏览器中，全剧对象是 window </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Node 中</span></span><br><span class="line">func() === globalThis;</span><br></pre></td></tr></table></figure><h3 id="严格模式下，函数调用的-this-值"><a href="#严格模式下，函数调用的-this-值" class="headerlink" title="严格模式下，函数调用的 this 值"></a>严格模式下，函数调用的 <code>this</code> 值</h3><p>严格模式下，若进入函数内部的执行环境时没有设置 <code>this</code> 值，则 <code>this</code> 值为 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func() === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果要把 <code>this</code> 值从一个环境传到另一个环境，就要用 <a href="app://obsidian.md/JavaScript/标准内置对象/Function/call()">call</a> 或 <a href="app://obsidian.md/apply()">apply</a> 方法。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;Custom&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个变量，并将该变量作为全局对象的属性</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whatsThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a; <span class="comment">// this 的值取决于函数被调用的方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">whtasThis();  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// expected output: &quot;Global&quot;</span></span><br><span class="line"></span><br><span class="line">whtasThis.call(obj); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// expected output: &quot;Custom&quot;</span></span><br><span class="line"></span><br><span class="line">whtasThis.apply(obj); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// expected output: &quot;Custom&quot;</span></span><br></pre></td></tr></table></figure><ol><li>在非严格模式下，若函数调用未设置 <code>this</code> 值，则 <code>this</code> 值默认指向全局对象。在浏览器中，全局对象为 <code>Window</code>；在 Node 中，全局对象为 <code>globalThis</code>。在 <code>whatsThis</code> 函数体外定义了一个全局变量 <code>a</code>，所以函数 <code>whatsThis</code> 内部 <code>this.a</code> 的值就是全局变量 <code>a</code> 的值。因此，直接调用 <code>whatsThis()</code> 得到的返回值是 <code>Global</code>。</li><li>通过调用 <code>whatsThis</code> 函数实例上的 <a href="app://obsidian.md/call()">call()</a> 方法，使 <code>whatsThis</code> 的 <code>this</code> 指向 obj。此时，函数 <code>whatsThis</code> 内部的 <code>this.a</code> 指向的就是对象 <code>obj</code> 的属性 <code>a</code>，因此函数的返回值是 <code>Custom</code>。</li><li>调用 <code>whatsThis</code> 函数实例上的 <a href="app://obsidian.md/apply()">apply()</a> 方法，将对象 <code>obj</code> 指定为函数的 <code>this</code> 值。这样，在函数内部访问 <code>this</code> 上的成员 <code>a</code> 时，实际访问的就是对象 <code>obj</code> 中的 <code>a</code> 属性。因此，函数返回值为 <code>Custom</code>。</li></ol><h2 id="类上下文中的-this"><a href="#类上下文中的-this" class="headerlink" title="类上下文中的 this"></a>类上下文中的 <code>this</code></h2><p><code>this</code> 在[类](app:&#x2F;&#x2F;obsidian.md&#x2F;JavaScript 中的类)中的表现与在函数中类似，因为类的本质也是函数。</p><p>在类的构造函数中，<code>this</code> 是一个常规对象。类中所有非静态方法都会被添加到 <code>this</code> 的原型中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> proto = <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPrototypeNames(proto));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getGender</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(); <span class="comment">// [&#x27;constructor&#x27;, &#x27;getName&#x27;, &#x27;getAge&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意，静态方法不是 <code>this</code> 的属性，它们只是类自身的属性。</p><p>派生类的构造函数中没有初始的 <code>this</code> 绑定，可在基类的构造函数中调用 <a href="app://obsidian.md/super">super()</a> 方法生成一个 <code>this</code> 绑定。调用 <a href="app://obsidian.md/super">super()</a> 方法相当于执行以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span> = <span class="keyword">new</span> Base(); <span class="comment">// Base 为基类</span></span><br></pre></td></tr></table></figure><p>注意，在调用 <code>super()</code> 之前引用 <code>this</code> 会抛出错误。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><h3 id="this-和对象转换"><a href="#this-和对象转换" class="headerlink" title="this 和对象转换"></a><code>this</code> 和对象转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b + c +d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add.call(obj, <span class="number">5</span>, <span class="number">7</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// expected output: 16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add.apply(obj, [<span class="number">10</span>, <span class="number">20</span>])); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// expected output: 34</span></span><br></pre></td></tr></table></figure><ol><li><code>call()</code> 方法第一个参数用作 <code>this</code> 的对象，表示将函数 <code>add()</code> 方法的 <code>this</code> 绑定到对象 <code>obj</code> 上。这样，当在函数 <code>add()</code> 内部访问 <code>this</code> 时，它会指向到 <code>obj</code> 对象上。其余参数用作函数 <code>add()</code> 的参数。</li><li><code>apply()</code> 方法的第一个参数用作 <code>this</code> 的对象，表示将函数 <code>add()</code> 的 <code>this</code> 绑定到对象 <code>obj</code> 上。这样，当在函数 <code>add()</code> 内部访问 <code>this</code> 时，它会指向到 <code>obj</code> 对象上。第二个参数是一个数组，数组中的成员用作 <code>add()</code> 方法的函数参数。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this#%E7%B1%BB%E4%B8%8A%E4%B8%8B%E6%96%87">MDN Web Docs: 类上下文中的 this</a><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;this&lt;/code&gt; 不能在执行期间被赋值，并且在每次函数被调用时 &lt;code&gt;this&lt;/code&gt; 的值也有可能不同。在绝大多数情况下，函数的调用方式决定了 &lt;code&gt;this&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;在非严格模式下，&lt;code&gt;this&lt;/code&gt; 值总是指向一个对象；在严格模式下，&lt;code&gt;this&lt;/code&gt; 可以是任意值。&lt;/p&gt;
&lt;p&gt;ES5 引入了 bind 方法来设置 &lt;code&gt;this&lt;/code&gt; 值，而不用考虑函数是如何被调用的。&lt;/p&gt;
&lt;p&gt;ES2015 引入了 箭头函数，而箭头函数则不提供自身的 this 绑定。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Expressions - this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Randal&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: Randal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/tags/JavaScript/"/>
    
    <category term="JavaScript 表达式和运算符之 this" scheme="https://hi-ruofei.com/tags/JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B9%8B-this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 根据 url 转换图像（base64）</title>
    <link href="https://hi-ruofei.com/post/JavaScript%20%E6%A0%B9%E6%8D%AE%20url%20%E8%BD%AC%E6%8D%A2%E5%9B%BE%E5%83%8F%EF%BC%88base64%EF%BC%89/"/>
    <id>https://hi-ruofei.com/post/JavaScript%20%E6%A0%B9%E6%8D%AE%20url%20%E8%BD%AC%E6%8D%A2%E5%9B%BE%E5%83%8F%EF%BC%88base64%EF%BC%89/</id>
    <published>2022-03-24T16:52:47.000Z</published>
    <updated>2022-03-24T16:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时，我们需要根据图片的地址将图片转化为 base64 形式的字符串，然后将转换后的 base64 提交到后台。下面代码演示了如何根据图片的 url 来将其转换成 base64。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">url2base64</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?v=<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">  img.setAttribute(<span class="string">&#x27;crossOrigin&#x27;</span>, <span class="string">&#x27;Anonymous&#x27;</span>);</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> width = img.width;</span><br><span class="line">    <span class="keyword">const</span> height = img.height;</span><br><span class="line">    canvas.width = width;</span><br><span class="line">    canvas.height = height;</span><br><span class="line">    canvas.getContext(<span class="string">&#x27;2d&#x27;</span>).drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="keyword">const</span> dataURL = canvas.toDataURL(<span class="string">&#x27;image/jpeg&#x27;</span>);</span><br><span class="line">    <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; callback(dataURL);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://www.baidu.com/img/bd_logo1.png&#x27;</span>;</span><br><span class="line">url2base64(url, <span class="function"><span class="params">base64</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(base64);</span><br><span class="line">  <span class="comment">// expected output: 图像的 base64 编码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时，我们需要根据图片的地址将图片转化为 base64 形式的字符串，然后将转换后的 base64 提交到后台。下面代码演示了如何根据图片的 url 来将其转换成 base64。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/tags/JavaScript/"/>
    
    <category term="JavaScript Canvas" scheme="https://hi-ruofei.com/tags/JavaScript-Canvas/"/>
    
  </entry>
  
  <entry>
    <title>MediaWiki 设置短链接（short url）</title>
    <link href="https://hi-ruofei.com/post/MediaWiki-%E8%AE%BE%E7%BD%AE%E7%9F%AD%E9%93%BE%E6%8E%A5%EF%BC%88short-url%EF%BC%89/"/>
    <id>https://hi-ruofei.com/post/MediaWiki-%E8%AE%BE%E7%BD%AE%E7%9F%AD%E9%93%BE%E6%8E%A5%EF%BC%88short-url%EF%BC%89/</id>
    <published>2022-02-22T19:15:36.000Z</published>
    <updated>2022-02-22T19:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本方法适用于 Apache 服务器。一般情况下，该方法不需要修改 Apache 服务器的配置文件，只需要在 MediaWiki 安装目录下配置 .htaccess 文件即可。</p><span id="more"></span><h2 id="htaccess-配置文件"><a href="#htaccess-配置文件" class="headerlink" title=".htaccess 配置文件"></a>.htaccess 配置文件</h2><p>在 MediaWiki 根目录下创建 .htaccess 配置文件，并写入一下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Enable the rewrite engine</span><br><span class="line">RewriteEngine On</span><br><span class="line"></span><br><span class="line"># Short URL for wiki pages</span><br><span class="line">RewriteRule ^/?w(/.*)?$ %&#123;DOCUMENT_ROOT&#125;/index.php [L]</span><br><span class="line"></span><br><span class="line"># Redirect / to Main Page</span><br><span class="line">RewriteRule ^/*$ %&#123;DOCUMENT_ROOT&#125;/index.php [L]</span><br></pre></td></tr></table></figure><p>第二行代码表示开启 Apache 的重写引擎。</p><p>第四行代码中的 <code>%&#123;DOCUMENT_ROOT&#125;/index.php</code> 表示 MediaWiki 根目录下的 index.php 文件，也就是我们访问 MediaWiki 网站时的入口文件，这行代码的意思是当访问 MediaWiki 网站入口时，将其地址重写为 &#x2F;w&#x2F;。比如，当访问这个链接 <a href="https://domain.com/index.php?title=%E9%A6%96%E9%A1%B5">https://domain.com/index.php?title=首页</a> 时，这条规则会将地址重写为 <a href="https://domain.com/%E9%A6%96%E9%A1%B5%E3%80%82%E8%BF%99%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%98%AF%E6%88%91%E4%BB%AC%E5%AE%9E%E7%8E%B0">https://domain.com/首页。这行代码是我们实现</a> MediaWiki 短链接的关键。</p><p>最后一行代码，也就是第六行代码表示当访问首页但地址栏没有任何参数时会将页面重定向到 MediaWiki 首页。比如访问 <a href="https://domain.com/">https://domain.com/</a> 时会重定向到 <a href="https://domain.com/index.php%E3%80%82%E8%A2%AB%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%88%E4%BC%9A%E8%A2%AB%E5%BA%94%E7%94%A8%E5%88%B0%E7%AC%AC%E5%9B%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%8C%E5%B0%86%E9%95%BF%E9%93%BE%E6%8E%A5%E9%87%8D%E5%86%99%E4%B8%BA%E7%9F%AD%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%B9%9F%E5%B0%B1%E4%BC%9A%E8%A2%AB%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0">https://domain.com/index.php。被重定向的地址又会被应用到第四行代码的规则，将长链接重写为短链接，也就会被重定向到</a> <a href="https://domain.com/%E9%A6%96%E9%A1%B5%E3%80%82">https://domain.com/首页。</a></p><p>除了修改 .htaccess 配置文件，还需要修改 MediaWIki 的配置文件 LocalSettings.php。</p><h2 id="LocalSettings-php-配置文件"><a href="#LocalSettings-php-配置文件" class="headerlink" title="LocalSettings.php 配置文件"></a>LocalSettings.php 配置文件</h2><p>LocalSettings.php 文件位于 MediaWiki 安装目录的根目录下，在该文件最后的位置添加新增以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wgScriptPath</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$wgArticlePath</span> = <span class="string">&quot;/w/<span class="subst">$1</span>&quot;</span>;</span><br><span class="line"><span class="variable">$wgUsePathInfo</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$wgScriptExtension</span> = <span class="string">&quot;.php&quot;</span>;</span><br></pre></td></tr></table></figure><p>关于这四行代码代表的意思可在 <a href="https://www.mediawiki.org/wiki/Manual:Contents">MediaWiki 网站手册</a>中查看。</p><p>至此，即可实现通过短链接访问 MediaWiki。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.hi-ruofei.com/">若非的维基</a></li><li><a href="https://www.mediawiki.org/wiki/Manual:Short_URL/zh">MediaWiki 短链接</a><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本方法适用于 Apache 服务器。一般情况下，该方法不需要修改 Apache 服务器的配置文件，只需要在 MediaWiki 安装目录下配置 .htaccess 文件即可。&lt;/p&gt;</summary>
    
    
    
    <category term="MediaWiki" scheme="https://hi-ruofei.com/categories/MediaWiki/"/>
    
    
  </entry>
  
  <entry>
    <title>推荐一款自用的梯子</title>
    <link href="https://hi-ruofei.com/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E8%87%AA%E7%94%A8%E7%9A%84%E6%A2%AF%E5%AD%90/"/>
    <id>https://hi-ruofei.com/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E8%87%AA%E7%94%A8%E7%9A%84%E6%A2%AF%E5%AD%90/</id>
    <published>2021-11-11T15:12:30.000Z</published>
    <updated>2021-11-11T15:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们经常需要使用 Google 搜索资料，毕竟百度的搜索结果中有太多不相关的结果。但是 Google 搜索在大陆地区被墙了，找了好多梯子用都不太理想，最后发现了这个 <a href="https://portal.shadowsocks.nz/aff.php?aff=51884">Shadowsocks</a>，效果很不错，推荐给大家。</p><p><img src="/images/2021/11/shadowsocks.png" alt="Shadowsocks"></p><p>价格也非常不错，一年才一百来块钱，每个月有 100G 的流量根本用不完，有兴趣的大家自行去看看 -&gt; <a href="https://portal.shadowsocks.nz/aff.php?aff=51884">Shadowsocks</a>。</p><span id="more"></span><p>这是我半个月的用量，每天都用的情况下：</p><p><img src="/images/2021/11/shadowsocks-used.png" alt="Shadowsocks Used"></p><p>还有他的产品分类，一个是基础版，还有一个高级版：</p><p><img src="/images/2021/11/shadowsocks-cart.png" alt="Shadowsocks Cart"></p><p>是不是挺划算的 ;D</p><p>官方网站：<a href="https://portal.shadowsocks.nz/aff.php?aff=51884">Shadowsocks</a>。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候我们经常需要使用 Google 搜索资料，毕竟百度的搜索结果中有太多不相关的结果。但是 Google 搜索在大陆地区被墙了，找了好多梯子用都不太理想，最后发现了这个 &lt;a href=&quot;https://portal.shadowsocks.nz/aff.php?aff=51884&quot;&gt;Shadowsocks&lt;/a&gt;，效果很不错，推荐给大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021/11/shadowsocks.png&quot; alt=&quot;Shadowsocks&quot;&gt;&lt;/p&gt;
&lt;p&gt;价格也非常不错，一年才一百来块钱，每个月有 100G 的流量根本用不完，有兴趣的大家自行去看看 -&amp;gt; &lt;a href=&quot;https://portal.shadowsocks.nz/aff.php?aff=51884&quot;&gt;Shadowsocks&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="实用工具" scheme="https://hi-ruofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="shadowsocks" scheme="https://hi-ruofei.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 搭建 MediaWiki</title>
    <link href="https://hi-ruofei.com/post/%E4%BD%BF%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-MediaWiki/"/>
    <id>https://hi-ruofei.com/post/%E4%BD%BF%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-MediaWiki/</id>
    <published>2021-10-29T23:51:56.000Z</published>
    <updated>2021-10-29T23:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了使用 Docker 镜像搭建 MediaWiki 的步骤和方法。借助 Docker 能非常方便的搭建个人维基站点，在数据的备份等维护操作上同样也很便利。使用 Docker 镜像搭建的维基站点，不会在宿主机上安装 LNMP 或 LAMP 环境，能始终保持宿主机的干净清爽。</p><span id="more"></span><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><ol><li>mediawiki 镜像：<code>docker pull mediawiki</code>；</li><li>mariadb 镜像：<code>docker pull mariadb</code>；</li><li>nginx 镜像：<code>docker pull nginx</code>。</li></ol><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6487844781006261"     data-ad-slot="3432081921"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="启动-mariadb-数据库容器"><a href="#启动-mariadb-数据库容器" class="headerlink" title="启动 mariadb 数据库容器"></a>启动 mariadb 数据库容器</h3><p>终端中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mariadb -p 3306:3306 -e MARIADB_ROOT_PASSWORD=my-secret-pw mariadb</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>d</code>：默认不会进入容器。</li><li><code>p</code>：将容器内部使用的网络端口 3306 映射到物理机 3306 端口上（注意与参数 <code>P</code> 的区别：将容器内部使用的网络端口随机映射到主机上）。</li><li><code>e MARIADB_ROOT_PASSWORD</code>：配置 <code>mariadb</code> 数据库 <code>root</code> 密码。</li></ul><h3 id="启动-mediawiki-容器"><a href="#启动-mediawiki-容器" class="headerlink" title="启动 mediawiki 容器"></a>启动 mediawiki 容器</h3><p>终端中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mediawiki -p 81:80 -p 444:443 --link mariadb:mariadb mediawiki</span><br></pre></td></tr></table></figure><p>说明：参数 <code>--link mariadb:mariadb</code> 表示将容器 <code>mariadb</code> 链接到 <code>mediawiki</code> 容器上，冒号（<code>:</code>）前的 <code>mariadb</code> 是上一步运行的 <code>mariadb</code> 容器的名称，冒号后面的 <code>mariadb</code> 是该容器（<code>mediawiki</code> 容器）下的别名。</p><h3 id="启动-nginx-容器"><a href="#启动-nginx-容器" class="headerlink" title="启动 nginx 容器"></a>启动 nginx 容器</h3><p>终端中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6487844781006261"     data-ad-slot="3432081921"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="修改-nginx-配置文件"><a href="#修改-nginx-配置文件" class="headerlink" title="修改 nginx 配置文件"></a>修改 nginx 配置文件</h3><p>首先，进入 nginx 容器，cd 到 nginx 的配置目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx bash <span class="comment"># 进入 nginx 容器</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx <span class="comment"># cd 到 nginx 的配置目录</span></span><br></pre></td></tr></table></figure><p>以下是该目录下的文件和文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[lighthouse@centos]~% docker exec -it nginx bash</span><br><span class="line">root@df21774abed5:/# cd /etc/nginx</span><br><span class="line">root@df21774abed5:/etc/nginx# ls -al</span><br><span class="line">drwxr-xr-x 1 root root 4096 Oct 16 15:18 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Oct 16 15:18 ..</span><br><span class="line">drwxr-xr-x 1 root root 4096 Oct 16 15:19 conf.d</span><br><span class="line">-rw-r--r-- 1 root root 1007 Sep  7 15:21 fastcgi_params</span><br><span class="line">-rw-r--r-- 1 root root 5290 Sep  7 15:21 mime.types</span><br><span class="line">lrwxrwxrwx 1 root root   22 Sep  7 15:38 modules -&gt; /usr/lib/nginx/modules</span><br><span class="line">-rw-r--r-- 1 root root  648 Sep  7 15:38 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root  636 Sep  7 15:21 scgi_params</span><br><span class="line">-rw-r--r-- 1 root root  664 Sep  7 15:21 uwsgi_params</span><br></pre></td></tr></table></figure><p>nginx 的默认配置文件是 conf.d 文件夹下的 default.conf 文件，退出容器并将 default.conf 文件从容器中复制到宿主机中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@df21774abed5:/etc/nginx# cp default.conf default.conf.bak # 备份该配置文件</span><br><span class="line">root@df21774abed5:/etc/nginx# exit; # 退出 nginx 容器</span><br><span class="line">exit</span><br><span class="line">[lighthouse@centos]~% docker cp nginx:/etc/nginx/conf.d/default.conf . # 将容器中的 default.conf 文件复制到宿主机</span><br><span class="line">[lighthouse@centos]~% ls -al</span><br><span class="line">drwx------  9 lighthouse lighthouse 4096 Oct 17 00:15 .</span><br><span class="line">drwxr-xr-x. 3 root       root       4096 Nov 23  2020 ..</span><br><span class="line">-rw-r--r--  1 lighthouse lighthouse 1181 Oct 16 23:20 default.conf</span><br></pre></td></tr></table></figure><p>修改 <code>default.conf</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  _; # 换成你自己的域名</span><br><span class="line">    # return 301 https://$host$request_uri; # 该行先注释掉，因为还没有证书呢，稍后申请下证书后再取消注释</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass &lt;http://172.17.0.1:81/;&gt; # 修改端口号。这个 81 的端口号是上面运行 mediawiki 容器时制定的 81 端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    listen  [::]:443 ssl http2;</span><br><span class="line">    server_name  _; # 换成你自己的域名</span><br><span class="line"></span><br><span class="line">    # ssl on; #如果强制HTTPs访问，这行要打开</span><br><span class="line">    # ssl_certificate /etc/nginx/certs/ruofei.wiki.crt;</span><br><span class="line">    # ssl_certificate_key /etc/nginx/certs/ruofei.wiki.key;</span><br><span class="line">    ssl_certificate    /www/server/panel/vhost/cert/wiki.hi-ruofei.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /www/server/panel/vhost/cert/wiki.hi-ruofei.com/privkey.pem;</span><br><span class="line">    # ssl_session_timeout 5m;</span><br><span class="line">    # ssl_protocols SSLv2 SSLv3 TLSv1.2; # 指定密码为openssl支持的格式</span><br><span class="line">    # ssl_ciphers HIGH:!aNULL:!MD5; # 密码加密方式</span><br><span class="line">    # ssl_prefer_server_ciphers on; # 依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass &lt;http://172.17.0.1:81/;&gt; # 修改端口号。这个 81 的端口号是上面运行 mediawiki 容器时制定的 81 端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后再将其复制到 <code>nginx</code> 容器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp ./default.conf nginx:/etc/nginx/conf.d</span><br></pre></td></tr></table></figure><p>修改 <code>nginx</code> 配置文件，别忘了重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure><p>等待 <code>nginx</code> 容器重启，之后在浏览器中访问 <code>http://your_domain</code> 即可看到 MediaWiki 的安装界面。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了使用 Docker 镜像搭建 MediaWiki 的步骤和方法。借助 Docker 能非常方便的搭建个人维基站点，在数据的备份等维护操作上同样也很便利。使用 Docker 镜像搭建的维基站点，不会在宿主机上安装 LNMP 或 LAMP 环境，能始终保持宿主机的干净清爽。&lt;/p&gt;</summary>
    
    
    
    <category term="MediaWiki" scheme="https://hi-ruofei.com/categories/MediaWiki/"/>
    
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - NonNullable: TypeScript 实用类型 - NonNullable</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-NonNullable-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-NonNullable/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-NonNullable-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-NonNullable/</id>
    <published>2021-07-04T14:30:35.000Z</published>
    <updated>2021-07-04T14:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>NonNullable&lt;Type&gt;</code> 类型。<code>NonNullable</code> 会从传入的类型中将 <code>null</code> 和 <code>undefined</code> 排除，之后把剩下的成员构造成一个新类型。</p><p>下面是一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = NonNullable&lt;U1&gt;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>上面的代码中定义了一个名为 <code>U1</code> 的联合类型，<code>NonNullable</code> 会将该类型中的 <code>undefined</code> 排除，再将剩余的成员构造成新的类型 <code>T0</code>，类型 <code>T0</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT0 = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p>再看一个包含成员 <code>null</code> 的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U2 = <span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">type</span> T1 = NonNullable&lt;U2&gt;;</span><br></pre></td></tr></table></figure><p>上面的类型 <code>U2</code> 中包含成员 <code>null</code>，因此 <code>NonNullable</code> 会把 <code>null</code> 和 <code>undefined</code> 都排除掉，构造的新类型便是 <code>string[]</code>。类型 <code>T1</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT1 = <span class="built_in">string</span>[];</span><br></pre></td></tr></table></figure><p><code>NonNullable</code> 的类型定义源码中通过 <code>extends</code> 实现，源码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude null and undefined from T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> NonNullable&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T;</span><br></pre></td></tr></table></figure><p><code>never</code> 表示从来不会出现的值的类型，因此联合类型的当成员为 <code>null</code> 或 <code>undefined</code> 时，<code>NonNullable</code> 会将他们排除，只留下联合类型中的其他成员，通过保留下来的成员构造新的类型，也就是源码中的 <code>T</code> 类型。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;NonNullable&amp;lt;Type&amp;gt;&lt;/code&gt; 类型。&lt;code&gt;NonNullable&lt;/code&gt; 会从传入的类型中将 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 排除，之后把剩下的成员构造成一个新类型。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U1 = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; | &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = NonNullable&amp;lt;U1&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Extract: TypeScript 实用类型 - Extract</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Extract-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Extract/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Extract-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Extract/</id>
    <published>2021-07-04T10:41:38.000Z</published>
    <updated>2021-07-04T10:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>Extract</code> 类型。看字面意思，<code>Extract</code> 是指<strong>取出</strong>、<strong>挑出</strong>的意思，<code>Extract</code> 会挑选出传入的两个联合类型中相同的成员，将这些相同的成员构造成一个新类型，构造的新类型有可能是联合类型，也有可能是其他任何类型。</p><p>下面是一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> U2 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = Extract&lt;U1, U2&gt;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>上面代码中定义了两个联合类型 <code>U1</code> 和 <code>U2</code>，这两个联合类型中有一个相同的成员 <code>&quot;a&quot;</code>，<code>Extract</code> 会将该成员 <code>&quot;a&quot;</code> 取出来构造一个新类型。构造的新类型 <code>T0</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 `Extract` 构造了一个新的字符串类型 `NewT0`</span></span><br><span class="line"><span class="keyword">type</span> NewT0 = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果在两个联合类型中，存在多个相同的成员（两个及以上）时，<code>Extract</code> 会将这些成员构造成一个新的<strong>联合类型</strong>，下面是另一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U3 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> U4 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> T1 = Extract&lt;U3, U4&gt;;</span><br></pre></td></tr></table></figure><p>上面两个联合类型 <code>U3</code> 和 <code>U4</code> 中存在多个相同的成员：<code>&quot;a&quot;</code> 和 <code>&quot;c&quot;</code>，<code>Extract</code> 会将他们构造成一个新的联合类型，联合类型 <code>T1</code> 与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT1 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br></pre></td></tr></table></figure><p>对初学者来说，还有一种情况容易受到误导，看下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U5 = <span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>);</span><br><span class="line"><span class="keyword">type</span> U6 = <span class="built_in">Function</span>;</span><br><span class="line"><span class="keyword">type</span> T2 = Extract&lt;U5, U6&gt;; <span class="comment">// type T2 = () =&gt; void;</span></span><br></pre></td></tr></table></figure><p>从字面量的角度来看，<code>U5</code> 和 <code>U6</code> 两个联合类型中并没有相同的成员，但是从类型角度来说 <code>() =&gt; void</code> 表示的是一个函数，它的类型与 <code>Function</code> 是等价的，因此构造出的新类型 <code>T</code> 是一个函数。</p><p>了解了 <code>Extract</code> 的用法，下面看一下它的类型定义源码，<code>Extract</code> 在实现上非常简单，源码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>通过 <code>Extract</code> 的源码我们不难发现，<code>Extract</code> 从 <code>T</code> 类型中取出 <code>T</code> 和 <code>U</code> 类型中共有的成员来构造一个新类型，如果其中没有共有成员，将返回 <code>never</code> 类型。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;Extract&lt;/code&gt; 类型。看字面意思，&lt;code&gt;Extract&lt;/code&gt; 是指&lt;strong&gt;取出&lt;/strong&gt;、&lt;strong&gt;挑出&lt;/strong&gt;的意思，&lt;code&gt;Extract&lt;/code&gt; 会挑选出传入的两个联合类型中相同的成员，将这些相同的成员构造成一个新类型，构造的新类型有可能是联合类型，也有可能是其他任何类型。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U2 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = Extract&amp;lt;U1, U2&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Omit: TypeScript 实用类型 - Omit</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Omit-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Omit/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Omit-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Omit/</id>
    <published>2021-06-29T10:44:13.000Z</published>
    <updated>2021-06-29T10:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>Omit</code> 类型。<code>Omit&lt;Type, Keys&gt;</code> 从类型中选取所有属性，然后通过删除指定键来构造类型。以下面的 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Omit</code> 类型转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 `User` 类型中的 `age` 和 `gender` 属性</span></span><br><span class="line"><span class="comment">// 只剩下了 `name` 属性</span></span><br><span class="line"><span class="keyword">type</span> OmitUser = Omit&lt;User, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> omitUser: OmitUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>OmitUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OmitUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，<code>Omit</code> 是如何转换类型的呢？我们通过它的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><p><code>Omit</code> 源码的类型定义中有几点需要注意：</p><ul><li><code>K extends keyof any</code>：这段代码表示泛型 <code>K</code> 继承自联合类型 <code>keyof any</code>；</li><li><code>Pick</code> 是 TypeScript 中作用于全局的实用类型，用于从类型中选取一组属性键来构造类型<sup id="fnref:1"><a href="#fn:1" rel="footnote">[1]</a></sup>;</li><li><code>Exclude</code> 是 TypeScript 中另一个作用于全局的实用类型，通过排除联合类型中的指定成员来构造新类型<sup id="fnref:2"><a href="#fn:2" rel="footnote">[2]</a></sup>；</li><li>通过 <code>Exclude</code> 转换后的类型结果就是要挑选出来的成员，再经过 <code>Pick</code> 将他们从类型 <code>T</code> 中选取出来。</li></ul><p>在不了解 <code>Pick</code> 和 <code>Exclude</code> 类型作用的情况下，一般难以看懂 <code>Omit</code> 类型的源码。下面参考部分有相关的传送门，当你理解了 <code>Pick</code> 和 <code>Exclude</code> 后回头再看 <code>Omit</code> 就能理解了。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKClAdgQwFsIAuKOYRAS1wHMBubKfW0vAV0ICMlGdXcAEyRkK1OowC+jTKEhQA8oSrB4SVIuXAAPGsQAaKAHIWEI1AA+xgcMRGAfDIDGAe1wUoLrXrJKVejSwcAmIyIwUAGyoANzN9TGkgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><div id="footnotes"><div id="footnotelist"><div style="border-bottom: 1px solid #eee; font-size: 1.125em; margin-bottom: 10px; margin-top: 60px;">参考</div><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="/post/bdb49a56/">TypeScript 实用类型：<code>Pick</code></a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="/post/fca5d737/">TypeScript 实用类型：<code>Exclude</code></a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;Omit&lt;/code&gt; 类型。&lt;code&gt;Omit&amp;lt;Type, Keys&amp;gt;&lt;/code&gt; 从类型中选取所有属性，然后通过删除指定键来构造类型。以下面的 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Exclude: TypeScript 实用类型 - Exclude</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Exclude-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Exclude/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Exclude-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Exclude/</id>
    <published>2021-06-26T15:17:57.000Z</published>
    <updated>2021-06-26T15:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Exclude&lt;Type, ExcludeUnion&gt;</code> 通过排除联合类型中的指定成员来构造新类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Letter = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = Exclude&lt;Letter, <span class="string">&#x27;a&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p>上例代码中的类型 <code>T0</code> 等价于下面的写法：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T0 = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Exclude</code> 将联合类型 <code>Letter</code> 中的成员 <code>a</code> 排除掉，得到了一个叫 <code>T0</code> 的联合类型。最终在联合类型 <code>T0</code> 中，只有成员 <code>b</code> 和 成员 <code>c</code>。</p><p>那么，<code>Exclude&lt;Type, ExcludeUnion&gt;</code> 是如何排除类型成员的呢？下面我们通过它的类型定义文件分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br></pre></td></tr></table></figure><p><code>T extends U ? nver : T</code> 类似于 JavaScript 中的三目运算符，这是 TypeScript 2.8 中引入的<strong>条件类型</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">[1]</a></sup>，意思是：如果 <code>T</code> 类型是 <code>U</code> 类型的子类型的话，返回 <code>never</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">[2]</a></sup>，否则返回 <code>T</code> 类型。通过刚才的例子我们不难发现，<code>Exclude</code> 就是将前面的类型与后面的类型对比，过滤出前面联合类型中独有的成员。</p><p><code>Exclude</code> 除了可以排除联合类型中的字符串成员，还可以过滤函数成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyUnion = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>);</span><br><span class="line"><span class="keyword">type</span> T2 = Exclude&lt;MyUnion, <span class="built_in">Function</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `T2` 类型等价于下面的 `T3` 类型</span></span><br><span class="line"><span class="keyword">type</span> T3 = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果是两个联合类型呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> U2 = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;5&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> U3 = Exclude&lt;U1, U2&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `U3` 类型等价于下面的 `U4` 类型</span></span><br><span class="line"><span class="keyword">type</span> U4 = <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>U3</code> 类型的结果可能让人疑惑，看上去 <code>U1</code> 类型并不是继承自 <code>U2</code> 类型，最后为什么将类型 <code>U1</code> 中的成员 <code>b</code> 和成员 <code>c</code> 过滤掉了呢？首先我们注意到 <code>U1</code> 和 <code>U2</code> 类型都是联合类型，换句话说 <code>U1</code> 类型有可能是 <code>&#39;a&#39;</code>，有可能是 <code>&#39;b&#39;</code>，也有可能是 <code>&#39;c&#39;</code>。显然成员 <code>&#39;a&#39;</code> 没有继承自 <code>U2</code> 类型，而成员 <code>&#39;b&#39;</code> 和成员 <code>&#39;c&#39;</code> 分别继承自类型 <code>U2</code>，所以，最终 <code>Exclude</code> 将 <code>U1</code> 类型中的成员 <code>&#39;b&#39;</code> 和成员 <code>&#39;c&#39;</code> 排除掉，只留下了成员 <code>&#39;a&#39;</code>。</p><div id="footnotes"><div id="footnotelist"><div style="border-bottom: 1px solid #eee; font-size: 1.125em; margin-bottom: 10px; margin-top: 60px;">参考</div><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">TypeScript 条件类型</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type">TypeScript <code>never</code> 类型</a><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Exclude&amp;lt;Type, ExcludeUnion&amp;gt;&lt;/code&gt; 通过排除联合类型中的指定成员来构造新类型。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Letter = &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = Exclude&amp;lt;Letter, &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上例代码中的类型 &lt;code&gt;T0&lt;/code&gt; 等价于下面的写法：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Pick: TypeScript 实用类型 - Pick</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Pick-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Pick/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Pick-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Pick/</id>
    <published>2021-06-25T17:31:10.000Z</published>
    <updated>2021-06-25T17:31:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Pick&lt;Type, Keys&gt;</code> 可从类型中选取一组属性键来构造类型。以下面的 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Pick&lt;Type, Keys&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PickUser = Pick&lt;User, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `PickUser` 类型相对于 `User` 类型少了 `gender` 属性</span></span><br><span class="line"><span class="keyword">const</span> pickUser: PickUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>PickUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PickUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，<code>Pick&lt;Type, Keys&gt;</code> 是如何转换类型的呢？我们通过它的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结合上面的示例，<code>Pick</code> 类型定义中的泛型 <code>T</code> 就是我们刚才定义的类型 <code>User</code>，后面的 <code>K extends keyof T</code> 则表示泛型 <code>K</code> 继承自联合类型 <code>keyof T</code>，由此可以得出泛型 <code>K</code> 是一个联合类型。</p><p>通过关键字 <code>in</code> 来遍历联合类型 <code>K</code>，将联合类型中的每个成员作为 key，通过方括号语法访问类型 <code>T</code> 中该成员对应的值，即 <code>T[P]</code>。</p><p>以上就是 <code>Pick&lt;Type, Keys&gt;</code> 的用法和类型定义的解析，欢迎在下方留言交流。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKClAdgQwFsIAuKOYRAS1wHMBubKfW0vAV0ICMlGdXcAEyRkK1OowC+jTKEhQAClQDGAa3hJUilaoA8GxABooAcgLETUAD6mWEEwD4ZAemdQABkrUH3UQN4+gNHqgB9ugJ-agHFyHj7+AYCIOoBhch4Cwoi+gHo6gOQGmMoA9rgUUGA6BmRe6gjIaFg45mwmAPIANlQAbvaGTHZkAIwAHO3SmEA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Pick&amp;lt;Type, Keys&amp;gt;&lt;/code&gt; 可从类型中选取一组属性键来构造类型。以下面的 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker 入门之安装教程</title>
    <link href="https://hi-ruofei.com/post/Docker-%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://hi-ruofei.com/post/Docker-%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2021-06-22T11:45:59.000Z</published>
    <updated>2021-06-22T11:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍了在 Mac OS, Windows, Linux 下的 Docker 安装方法。开始之前我们先看一下官方对 Docker 的介绍：</p><blockquote><p>Docker Engine is available for Linux (<a href="https://store.docker.com/editions/community/docker-ce-server-centos">CentOS</a>, <a href="https://store.docker.com/editions/community/docker-ce-server-debian">Debian</a>, <a href="https://store.docker.com/editions/community/docker-ce-server-fedora">Fedora</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-oraclelinux">Oracle Linux</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-rhel">RHEL</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-sles">SUSE</a>, and <a href="https://store.docker.com/editions/community/docker-ce-server-ubuntu">Ubuntu</a>) or <a href="https://store.docker.com/editions/enterprise/docker-ee-server-windows">Windows Server</a> operating systems and is based on containerd - the open source container runtime project that Docker donated to the Cloud Native Computing Foundation (CNCF) in 2017. It is available as both a free community-supported engine and as a commercially-supported enterprise engine (Docker Engine-Enterprise) that also forms the foundation for an enterprise container platform.</p></blockquote><p>通过官方的介绍我们不难发现，Docker 已经基本上覆盖了全平台，对于英文好的朋友，直接去官网按照指南一步一步安装即可。</p><p>英文一般的朋友，继续往下看吧那就～</p><span id="more"></span><h2 id="Mac-OS-上的-Docker-安装方法"><a href="#Mac-OS-上的-Docker-安装方法" class="headerlink" title="Mac OS 上的 Docker 安装方法"></a>Mac OS 上的 Docker 安装方法</h2><p>第一种方法是下载官方的 <code>dmg</code> 安装包：</p><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac">Docker Descktop for Mac</a></p><p>安装该软件包对系统的要求：</p><blockquote><p>Requires Apple Mac OS Sierra 10.12 or above. Download <a href="https://docs.docker.com/toolbox/overview/">Docker Toolbox</a> for previous OS versions.</p></blockquote><p>只要系统是 Mac OS Sierra 10.12 以上即可。</p><p>下载完 <code>Docker.dmg</code> 安装包之后，双击即可以安装，可能需要系统管理员权限，输入密码即可。</p><p>安装成功后，在系统菜单栏上会有 Docker 的小图标：</p><p><img src="/images/2021/06/Xt0mTI.png" alt="Docker 小图标"></p><p>安装完之后，在终端工具中，使用 <code>docker version</code> 来查看 Docker 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker version</span><br><span class="line">Client:</span><br><span class="line"> Cloud integration: 1.0.14</span><br><span class="line"> Version:           20.10.6</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.3</span><br><span class="line"> Git commit:        370c289</span><br><span class="line"> Built:             Fri Apr  9 22:46:57 2021</span><br><span class="line"> OS/Arch:           darwin/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.6</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       8728dd2</span><br><span class="line">  Built:            Fri Apr  9 22:44:56 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.4</span><br><span class="line">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc93</span><br><span class="line">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>设置中国区加速地址：</p><p><img src="/images/2021/06/xaybI4.png" alt="设置 Docker 中国区加速地址"></p><p>上面打码的地址是阿里云提供的 Docker 镜像加速地址，每个人都可以去申请一个个人镜像地使用。</p><blockquote><p>阿里云 Docker 镜像加速：<a href="https://yq.aliyun.com/articles/29941">Docker 镜像加速器</a></p></blockquote><p>第二种方法是通过 <code>brew cask</code> 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew update</span><br><span class="line">➜  ~ brew cask install docker</span><br><span class="line">➜  ~ brew cask uninstall docker <span class="comment"># 删除的方法, 还需要手动删除Docker.app</span></span><br></pre></td></tr></table></figure><p>上面的命令将会把 Docker 安装在 <code>Applications</code> 目录下。</p><h2 id="Windows-上-Docker-安装"><a href="#Windows-上-Docker-安装" class="headerlink" title="Windows 上 Docker 安装"></a>Windows 上 Docker 安装</h2><p>官方下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">Docker Desktop for Windows</a></p><p>对系统的要求：</p><blockquote><p>Requires Microsoft Windows 10 Professional or Enterprise 64-bit. For previous versions get <a href="https://docs.docker.com/toolbox/overview/">Docker Toolbox</a>.</p></blockquote><p>需要 Windows 10 专业版及企业的 64 位版本，在 Windows server 2016 以上亲测是可用的。Windows 8&#x2F;7&#x2F;Vista&#x2F;Xp 之类的，就别想了，老实去装 Windows 10 或者虚拟机中去使用。</p><h2 id="Linux-上-Docker-安装"><a href="#Linux-上-Docker-安装" class="headerlink" title="Linux 上 Docker 安装"></a>Linux 上 Docker 安装</h2><p>下面介绍最常见的 Linux 系统下安装 Docker 的方法。</p><h3 id="Centos-中-Docker-安装方法"><a href="#Centos-中-Docker-安装方法" class="headerlink" title="Centos 中 Docker 安装方法"></a>Centos 中 Docker 安装方法</h3><ol><li><p>先删除旧的版本（如果没有可以跳过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装必须的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加 <code>stable</code> 的 Docker-ce 的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>选择指定的安装版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><p>我们来举个例子，比如我们要安装 <code>3:18.09.1-3.el7</code> 这个版本，使用如下命令结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo yum install docker-ce- docker-ce-cli- containerd.io</span><br></pre></td></tr></table></figure><p>第一部分是 <code>docker-ce</code>，第二部分是版本号 <code>18.09.1</code>，看明白了吗？就是这样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y docker-ce-18.09.1 docker-ce-cli-18.09.1</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker <span class="comment"># 启动服务</span></span><br><span class="line">$ sudo docker run hello-world <span class="comment"># 来一个 Hello World 吧</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete</span><br><span class="line">Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line">1. The Docker client contacted the Docker daemon.</span><br><span class="line">2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">(amd64)</span><br><span class="line">3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">executable that produces the output you are currently reading.</span><br><span class="line">4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line">$ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line">https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line">https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>如果看到上面的提示，说明 Docker 已经成功安装并运行了。</p></li><li><p>关于升级&amp;删除：</p><p>升级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y update <span class="comment"># 更新所有</span></span><br><span class="line">$ yum -y update docker-ce docker-ce-cli containerd.io <span class="comment"># 更新指定</span></span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker <span class="comment"># 删除文件系统</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Debian-中-Docker-的安装方法"><a href="#Debian-中-Docker-的安装方法" class="headerlink" title="Debian 中 Docker 的安装方法"></a>Debian 中 Docker 的安装方法</h3><ol><li><p>删除旧的版本(可跳过)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg \</span><br><span class="line">lsb-release</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>stable</code> 安装源：</p><ul><li>x86_64 &#x2F; amd64</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ul><li>armhf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ul><li>arm64</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>安装指定的版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line">docker-ce | 5:18.09.1~3-0~debian-stretch | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 5:18.09.0~3-0~debian-stretch | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 18.06.1~ce~3-0~debian        | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 18.06.0~ce~3-0~debian        | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>安装格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce= docker-ce-cli= containerd.io</span><br></pre></td></tr></table></figure><p>举例说明：比如要安装 <code>5:18.09.1~3-0~debian-stretch</code> 版本的 docker 的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=18.09.1 docker-ce-cli=18.09.1 containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Docker运行状态</span></span><br><span class="line">$ sudo service docker status</span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><h3 id="Ubuntu-中-Docker-安装方法"><a href="#Ubuntu-中-Docker-安装方法" class="headerlink" title="Ubuntu 中 Docker 安装方法"></a>Ubuntu 中 Docker 安装方法</h3><ol><li><p>删除旧的版本(可跳过)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install</span><br><span class="line">apt-transport-https</span><br><span class="line">ca-certificates</span><br><span class="line">curl</span><br><span class="line">gnupg-agent</span><br><span class="line">software-properties-common</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - <span class="comment"># 添加GPG key</span></span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb)</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>stable</code> 安装源：</p><ul><li><p>x86_64&#x2F;amd64</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[armhf]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[arm64]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[ppc64le (IBM Power)]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=ppc64el] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>s390x (IBM Z)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=s390x] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>安装指定的版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  ...</span><br></pre></td></tr></table></figure><p>安装格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce= docker-ce-cli= containerd.io</span><br></pre></td></tr></table></figure><p>举例说明：比如要安装 <code>5:18.09.1~3-0~ubuntu-xenial</code> 版本的 docker 的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=18.09.1 docker-ce-cli=18.09.1 containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo service docker status <span class="comment"># 查看 Docker 运行状态</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker-compose-集合命令"><a href="#Docker-compose-集合命令" class="headerlink" title="Docker-compose 集合命令"></a>Docker-compose 集合命令</h2><p>Compose 工具是一个 <code>批量</code> 工具，用于运行与管理多个 <code>docker</code> 容器。</p><p>官方文档：<a href="https://docs.docker.com/compose/install/">Install Docker Compose</a></p><ol><li><p>在 Mac&#x2F;Windows 中，已经集成了 docker-compose 命令</p></li><li><p>在 WindowsServer 中 先启动 PowerShell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</span><br></pre></td></tr></table></figure><p>然后运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WebRequest <span class="string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Windows-x86_64.exe&quot;</span> -UseBasicParsing -OutFile <span class="variable">$Env</span>:ProgramFilesDockerdocker-compose.exe</span><br></pre></td></tr></table></figure><p>然后测试一下：<code>docker-compose --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 给予执行权限</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 测试命令</span></span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br></pre></td></tr></table></figure></li></ol><p>以上就是在各个平台安装 Docker 的步骤，欢迎在下方留言交流。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍了在 Mac OS, Windows, Linux 下的 Docker 安装方法。开始之前我们先看一下官方对 Docker 的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Engine is available for Linux (&lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-centos&quot;&gt;CentOS&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-debian&quot;&gt;Debian&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-fedora&quot;&gt;Fedora&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-oraclelinux&quot;&gt;Oracle Linux&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-rhel&quot;&gt;RHEL&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-sles&quot;&gt;SUSE&lt;/a&gt;, and &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-ubuntu&quot;&gt;Ubuntu&lt;/a&gt;) or &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-windows&quot;&gt;Windows Server&lt;/a&gt; operating systems and is based on containerd - the open source container runtime project that Docker donated to the Cloud Native Computing Foundation (CNCF) in 2017. It is available as both a free community-supported engine and as a commercially-supported enterprise engine (Docker Engine-Enterprise) that also forms the foundation for an enterprise container platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过官方的介绍我们不难发现，Docker 已经基本上覆盖了全平台，对于英文好的朋友，直接去官网按照指南一步一步安装即可。&lt;/p&gt;
&lt;p&gt;英文一般的朋友，继续往下看吧那就～&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端进阶" scheme="https://hi-ruofei.com/tags/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Readonly: TypeScript 实用类型 - Readonly</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Readonly-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Readonly/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Readonly-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Readonly/</id>
    <published>2021-06-21T16:26:18.000Z</published>
    <updated>2021-06-21T16:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Readonly&lt;Type&gt;</code> 可将一个类型中所有属性转换为<strong>只读</strong>属性。以 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Readonly&lt;Type&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadonlyUser = Readonly&lt;User&gt;;</span><br><span class="line"><span class="keyword">const</span> readonlyUser: ReadonlyUser = &#123;</span><br><span class="line">  <span class="comment">/** `name` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">/** `gender` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后的 <code>ReadonlyUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadonlyUser = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Readonly&lt;Type&gt;</code> 是如何转换类型的呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * Make all properties in T readonly */</span></span><br><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历类型 <code>T</code>，将类型 <code>T</code> 中的属性作为 key；</li><li>在属性 key 前面加 <code>readonly</code> 修饰符，使其转换为只读属性；</li><li>只读属性的值为 <code>T</code> 类型中对应属性的值，即 <code>T[P]</code>。</li></ul><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAEoQCwgPZ4ANiHhJUy1Ru0gAPHsQA+JpgDGmylERHNOi+RVrXuhMjRYBAHoAKmCoAANCEnCoQD0dQHIDQHozQCvlQG-owBC3KGDA5hwo9gByAHktagA3CAKAGlyoELDw1ggYhJSMrJyBJvIARgAOGqDQiKFRRBaktMzs2tGxKAKAMwgiAi1KmtlMQMCoQFPowFmTQB15QFg5QGqIwEFFQA7owBh-wAO1QC45COcvEwsYwFo5bd3MyOJmuLxQBPumdADbxgCNjB6hNKhBKAIAZvs8XG9fJ90oABI0AkOYJQC-CW10giXsY3L4AHT5AwFABSBFsAGsCgwgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Readonly&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中所有属性转换为&lt;strong&gt;只读&lt;/strong&gt;属性。以 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Record: TypeScript 实用类型 - Record</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Record-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Record/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Record-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Record/</id>
    <published>2021-06-21T16:26:18.000Z</published>
    <updated>2021-06-21T16:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Record&lt;Keys, Type&gt;</code> 可构造一个对象类型，其属性 key 是 key，属性值是类型。该类型可用于将一个类型的属性映射到另一个类型。</p><p>假设我们有一个 <code>User</code> 类型，如下：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经 <code>Record&lt;Keys, Type&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewUser = Record&lt;<span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;gender&quot;</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> newUser: NewUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>, <span class="comment">// 注意这里</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>NewUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">string</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最开始定义的 <code>User</code> 类型中 <code>age</code> 属性为 <code>number</code> 类型，为什么经过 <code>Record&lt;Keys, Type&gt;</code> 转换后 <code>age</code> 属性变为 <code>string</code> 类型了呢？下面根据 <code>Record&lt;Keys, Type&gt;</code> 的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类型定义中有一个操作符 <code>keyof</code> 和一个关键字 <code>in</code>，要理解 <code>Record&lt;Keys, Type&gt;</code> 如何工作，这两个知识点是必须要知道的。</p><ul><li><p><code>keyof</code> 操作符可以获取一个类型的所有键，返回一个这些键的联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> UserPropType = keyof User;</span><br></pre></td></tr></table></figure><p>上面代码中 <code>UserPropType</code> 的类型等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserPropType = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>;</span><br></pre></td></tr></table></figure><p>由上面的示例可知：<code>keyof</code> 操作符获取一个类型中所有 key，并返回这些 key 的联合类型。所以上面 <code>Record</code> 的用法还可以改写成这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewUser = Record&lt;keyof User, <span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure></li><li><p><code>in</code> 是一个 <code>类型关键字</code>，可以对联合类型进行遍历，只可用在 <code>type</code> 关键字下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Person =&gt; &#123; name: number; age: number; &#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>知道了 <code>keyof</code> 操作符和 <code>in</code> 关键字的作用，<code>Record&lt;Keys, Type&gt;</code> 的类型定义也就清楚了：</p><ul><li>类型 <code>K</code> 继承自联合类型 <code>keyof any</code>；</li><li>通过关键字 <code>in</code> 遍历联合类型 <code>K</code>，并将遍历的结果作为 key；</li><li>key 的值是类型 <code>T</code>。</li></ul><p>现在回头看 <code>Record&lt;Keys, Type&gt;</code> 的定义是不是就理解了呢？欢迎在下方留言交流。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpjmhIUAHIQA7vCSooAJQgBjAPaJhAHgDWEEAYBmsBIgA0FKrToA+JpkN5K+NRsRyFXV7LSwcQhJyACIAeQAbagA3CGiHZlZ2aIBGAA40qAB6QqhAC5tAeENATfjAGcTmIVFAqGjrCCICeNT06QYgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; 可构造一个对象类型，其属性 key 是 key，属性值是类型。该类型可用于将一个类型的属性映射到另一个类型。&lt;/p&gt;
&lt;p&gt;假设我们有一个 &lt;code&gt;User&lt;/code&gt; 类型，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Required: TypeScript 实用类型 - Required</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Required-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Required/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Required-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Required/</id>
    <published>2021-06-20T16:34:04.000Z</published>
    <updated>2021-06-20T16:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Required&lt;Type&gt;</code> 类型与 <code>[Partial&lt;Type&gt;](#Partial-lt-Type-gt)</code> 类型的作用相反，<code>Required&lt;Type&gt;</code> 可将一个类型中的可选属性转换为必选属性。以 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>User</code> 类型中的 <code>age</code> 属性是可选属性，当经过 <code>Required&lt;Type&gt;</code> 转换后，该属性会被转换成必选属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RequiredUser = Required&lt;User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredUser: RequiredUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性由可选转成了必选 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是 <code>Required&lt;Type&gt;</code> 的源码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T required</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Required&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到属性后的 <code>-?</code> 了吗？意思是：去除该属性的可选属性，使其转换为必选的属性。</p><p><a href="https://www.typescriptlang.org/zh/play?ssl=16&ssc=3&pln=7&pc=1#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAEoQAjh2qIIw+ElTK1GrcIA8uxAD4mmAMYB7PJShb1m7efIrXx8-qwCAegAqIKgAA0ISMKhAPR1AcgNAejNAUf1ASATAELcoIIDmHEj2AHIAeQAbagA3CHyAGhyoYNCw1gho+OT0zOyBJvIARgAOGsCQ8KFRRBbE1Iys2tGxKHyAMwgiAmLKzGkGIA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Required&amp;lt;Type&amp;gt;&lt;/code&gt; 类型与 &lt;code&gt;[Partial&amp;lt;Type&amp;gt;](#Partial-lt-Type-gt)&lt;/code&gt; 类型的作用相反，&lt;code&gt;Required&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中的可选属性转换为必选属性。以 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age?: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Partial: TypeScript 实用类型 - Partial</title>
    <link href="https://hi-ruofei.com/post/TypeScript-Utility-Types-Partial-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Partial/"/>
    <id>https://hi-ruofei.com/post/TypeScript-Utility-Types-Partial-TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B-Partial/</id>
    <published>2021-06-20T01:52:51.000Z</published>
    <updated>2021-06-20T01:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Partial&lt;Type&gt;</code> 可将一个类型中所有属性转换为可选属性。假设我们有一个 <code>user</code> 的类型，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>经 <code>Partial&lt;Type&gt;</code> 转换后得到：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PartialUser = Partial&lt;User&gt;;</span><br><span class="line"><span class="keyword">const</span> partialUser: PartialUser = &#123;</span><br><span class="line">  <span class="comment">/** `name` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">/** `gender` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>PartialUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PartialUser = &#123;</span><br><span class="line">  name?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  age?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  gender?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么 <code>Partial&lt;Type&gt;</code> 是如何转换类型的呢？下面是它的源码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历类型 <code>T</code>，将类型 <code>T</code> 中的属性作为 key；</li><li>在属性后面加 <code>?</code> 使其变为可选的属性；</li><li>可选属性的值为 <code>T</code> 类型中对应属性的值，即 <code>T[P]</code>。</li></ul><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAAoFEwagQA28JKmWr1WgDw7EAPiaYAxgHs8lKGAMbtCRORVqXpvVgEB6ACpAqAADQhJQqEA9HUByA0B6M0B75UBIBMAQtyhA-2YcCPYAcgB5TWoANwg8gBpsqCCQ0NYIKLiktIysgQbyAEYADiqA4LChUUQmhJT0zOrhsSg8gDMIIi1yqukgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中所有属性转换为可选属性。假设我们有一个 &lt;code&gt;user&lt;/code&gt; 的类型，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;经 &lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt; 转换后得到：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>（JS）Chrome 下载 PDF 文件：（JS）解决 Chrome 浏览器下载 PDF 而不是预览 PDF</title>
    <link href="https://hi-ruofei.com/post/Chrome-%E4%B8%8B%E8%BD%BD-PDF-%E6%96%87%E4%BB%B6%EF%BC%9A%E8%A7%A3%E5%86%B3-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD-PDF-%E8%80%8C%E4%B8%8D%E6%98%AF%E9%A2%84%E8%A7%88-PDF/"/>
    <id>https://hi-ruofei.com/post/Chrome-%E4%B8%8B%E8%BD%BD-PDF-%E6%96%87%E4%BB%B6%EF%BC%9A%E8%A7%A3%E5%86%B3-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD-PDF-%E8%80%8C%E4%B8%8D%E6%98%AF%E9%A2%84%E8%A7%88-PDF/</id>
    <published>2021-06-20T01:35:17.000Z</published>
    <updated>2021-06-20T01:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前端开发中遇到这样一个问题：在 Chrome 中通过一个链接下载 PDF 文件时却被 Chrome 浏览器打开预览了，这不是我想要的效果，点击 PDF 链接的时候我希望下载这个文件而不是去预览。这里提供一个解决方案，将 PDF 文件通过 <code>XMLHttpRequest</code> 请求的方式，将文件转换为文件流，然后实现下载 PDF 的功能。</p><span id="more"></span><p>具体 JS 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>文件链接转文件流下载（主要针对 pdf - 解决谷歌浏览器 a 标签下直接打开 pdf 的问题）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url 文件链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>type 文件类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileLink2StreamDownload = <span class="function">(<span class="params">&#123; url, fileName, type &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reg =</span><br><span class="line">    <span class="regexp">/^([hH][tT]&#123;2&#125;[pP]:\/\/|[hH][tT]&#123;2&#125;[pP][sS]:\/\/)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\/])+$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (!reg.test(url))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;传入参数不合法，`url` 不是标准的文件链接&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="comment">// 规定请求的类型、URL 以及是否异步处理请求。</span></span><br><span class="line">  <span class="comment">//   三个参数分别是</span></span><br><span class="line">  <span class="comment">//     - method：请求的类型（GET 或 POST ）</span></span><br><span class="line">  <span class="comment">//     - url：文件在服务器上的位置</span></span><br><span class="line">  <span class="comment">//     - async：true（异步）或 false（同步）</span></span><br><span class="line">  xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">`application/<span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">  xhr.responseType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">this</span>.response], &#123; <span class="attr">type</span>: <span class="string">`application/<span class="subst">$&#123;type&#125;</span>`</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> objectUrl = URL.createObjectURL(blob);</span><br><span class="line">      <span class="keyword">const</span> ele = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      ele.href = objectUrl;</span><br><span class="line">      ele.download = fileName;</span><br><span class="line">      ele.click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>fileLink2StreamDownload</code> 方法内部通过 <code>XMLHttpRequest</code> 发起一个 GET 请求，设置请求的响应类型为 <code>blob</code>，然后在页面上创建一个隐藏的 <code>a</code> 标签，然后点击一下这个 <code>a</code> 标签，实现 PDF 的下载功能。这里的关键是将文件链接转换为 <code>blob</code> 文件流来实现下载 PDF。如果 PDF 的链接有权限验证的话，可以用你项目中封装好的 <code>request</code> 方法代替上面的 <code>XMLHttpRequest</code> 方法。</p><p>上面的方法是经过项目验证过的，你可以放心大胆的 copy 过去，根据你的项目略作修改就能用了！甚至都不用改就可以。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;在前端开发中遇到这样一个问题：在 Chrome 中通过一个链接下载 PDF 文件时却被 Chrome 浏览器打开预览了，这不是我想要的效果，点击 PDF 链接的时候我希望下载这个文件而不是去预览。这里提供一个解决方案，将 PDF 文件通过 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 请求的方式，将文件转换为文件流，然后实现下载 PDF 的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="QA" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/QA/"/>
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/tags/JavaScript/"/>
    
    <category term="Chrome" scheme="https://hi-ruofei.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare 转发 GitHub Gist</title>
    <link href="https://hi-ruofei.com/post/Cloudflare-%E8%BD%AC%E5%8F%91-GitHub-Gist/"/>
    <id>https://hi-ruofei.com/post/Cloudflare-%E8%BD%AC%E5%8F%91-GitHub-Gist/</id>
    <published>2021-05-23T01:05:51.000Z</published>
    <updated>2021-05-23T01:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了如何在 MediaWiki 中插入 GitHub Gist 代码片段。</p><span id="more"></span><h2 id="编写-MediaWiki-扩展-gists-php"><a href="#编写-MediaWiki-扩展-gists-php" class="headerlink" title="编写 MediaWiki 扩展 gists.php"></a>编写 MediaWiki 扩展 gists.php</h2><p>首先编写一个 MediaWiki 扩展，文件命名为 <code>gists.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extension for MediaWiki to include GitHub Gists in pages.</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2021 若非 &lt;rf.wangchn<span class="doctag">@foxmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> Extensions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 若非 &lt;rf.wangchn<span class="doctag">@foxmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$wgExtensionCredits</span>[<span class="string">&#x27;gists&#x27;</span>][] = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;path&#x27;</span> =&gt; <span class="keyword">__FILE__</span>,</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Gists&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;author&#x27;</span> =&gt; <span class="string">&#x27;若非&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;url&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;在你的 MediaWiki 中插入 GitHub Gist 代码片段。&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;version&#x27;</span> =&gt; <span class="number">1.0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$wgHooks</span>[<span class="string">&#x27;ParserFirstCallInit&#x27;</span>][] = <span class="string">&#x27;mvGists&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the &lt;gist&gt; tag to the parser.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Parser $parser Parser object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mvGists</span>(<span class="params"> Parser <span class="variable">$parser</span> </span>) </span>&#123;</span><br><span class="line">  <span class="variable">$parser</span>-&gt;setHook( <span class="string">&#x27;gist&#x27;</span>, <span class="string">&#x27;mvGistRender&#x27;</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses $input (gist number) and embeds gist code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $input Contents of tag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $args Attributes to the tag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Parser $parser Parser object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> PPFrame $frame Current parser grame</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mvGistRender</span>(<span class="params"> <span class="variable">$input</span>, <span class="keyword">array</span> <span class="variable">$args</span>, Parser <span class="variable">$parser</span>, PPFrame <span class="variable">$frame</span> </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( !<span class="keyword">empty</span>( <span class="variable">$args</span>[<span class="string">&#x27;files&#x27;</span>] ) ) &#123;</span><br><span class="line">    <span class="variable">$files</span> = explode( <span class="string">&#x27; &#x27;</span>, <span class="variable">$args</span>[<span class="string">&#x27;files&#x27;</span>] );</span><br><span class="line">  &#125; <span class="keyword">elseif</span>( !<span class="keyword">empty</span>( <span class="variable">$args</span>[<span class="string">&#x27;file&#x27;</span>] ) ) &#123;</span><br><span class="line">    <span class="variable">$files</span> = <span class="keyword">array</span>( <span class="variable">$args</span>[<span class="string">&#x27;file&#x27;</span>] );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$files</span> = <span class="keyword">array</span>( <span class="string">&#x27;&#x27;</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( !ctype_xdigit( <span class="variable">$input</span> ) ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;!!! Invalid gist number&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$gistId</span> = trim( <span class="variable">$input</span> );</span><br><span class="line">    <span class="variable">$output</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span>( <span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span> ) &#123;</span><br><span class="line">      <span class="comment">// 代理了 GitHub Gist</span></span><br><span class="line">      <span class="comment">// see: https://dash.cloudflare.com/a85714920ae16e02e952fe71641d9a70/workers/view/gist</span></span><br><span class="line">      <span class="variable">$output</span> .= Html::linkedScript( <span class="string">&quot;https://gist.icoder.workers.dev/<span class="subst">&#123;$input&#125;</span>.js?file=<span class="subst">&#123;$file&#125;</span>&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完成后，将该扩展文件放到 MediaWiki 站点根目录的 <code>extensions/gists/</code> 目录下。</p><p>在中国大陆无法访问 <a href="https://gist.github.com/">https://gist.github.com/（点我试一下你能访问吗？）</a>，借助 <a href="https://dash.cloudflare.com/">Cloudflare</a> 可以将其转发到其他域名下，这样就可以访问 <a href="https://gist.github.com/">https://gist.github.com/</a> 了。</p><h2 id="创建-Worker"><a href="#创建-Worker" class="headerlink" title="创建 Worker"></a>创建 Worker</h2><p>在 Cloudflare 中创建一个 worker，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = event.request.url.split(<span class="string">&quot;https://gist.icoder.workers.dev/&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> event.respondWith(fetch(<span class="string">`https://gist.github.com/<span class="subst">$&#123;url&#125;</span>`</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中第 2 行是 Cloudflare 提供的 worker.dev 路由，部署后通过该地址即可访问 Github Gist 中的代码片段。不要开启你本地的 vpn，访问一下这个地址试一下：<a href="https://gist.icoder.workers.dev/smpower/4814c681a44629f43b2f8455c436f669">https://gist.icoder.workers.dev/smpower/4814c681a44629f43b2f8455c436f669</a>。通过这个地址打开的页面就包含了上面的两个代码片段。</p><h2 id="启用-gists-扩展"><a href="#启用-gists-扩展" class="headerlink" title="启用 gists 扩展"></a>启用 gists 扩展</h2><p>在 MediaWiki 的配置文件 <code>LocalSettings.php</code> 中启用该扩展：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了其他配置项...</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;<span class="subst">$IP</span>/extensions/gists/gists.php&quot;</span>;</span><br></pre></td></tr></table></figure><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了如何在 MediaWiki 中插入 GitHub Gist 代码片段。&lt;/p&gt;</summary>
    
    
    
    <category term="MediaWiki" scheme="https://hi-ruofei.com/categories/MediaWiki/"/>
    
    
    <category term="Extensions" scheme="https://hi-ruofei.com/tags/Extensions/"/>
    
    <category term="扩展" scheme="https://hi-ruofei.com/tags/%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
</feed>
